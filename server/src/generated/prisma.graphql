
type AggregatePost {
  count: Int!
}

type BatchPayload {
  count: Long!
}

scalar Long

type Mutation {
  createPost(data: PostCreateInput!): Post!
  updatePost(data: PostUpdateInput!, where: PostWhereUniqueInput!): Post
  deletePost(where: PostWhereUniqueInput!): Post
  upsertPost(where: PostWhereUniqueInput!, create: PostCreateInput!, update: PostUpdateInput!): Post!
  updateManyPosts(data: PostUpdateInput!, where: PostWhereInput): BatchPayload!
  deleteManyPosts(where: PostWhereInput): BatchPayload!
}

enum MutationType {
  CREATED
  UPDATED
  DELETED
}

interface Node {
  id: ID!
}

type PageInfo {
  hasNextPage: Boolean!
  hasPreviousPage: Boolean!
  startCursor: String
  endCursor: String
}

type Post implements Node {
  id: ID!
  isPublished: Boolean!
  title: String!
  text: String!
}

type PostConnection {
  pageInfo: PageInfo!

  edges: [PostEdge]!
  aggregate: AggregatePost!
}

input PostCreateInput {
  isPublished: Boolean
  title: String!
  text: String!
}

type PostEdge {
  node: Post!
  cursor: String!
}

enum PostOrderByInput {
  id_ASC
  id_DESC
  isPublished_ASC
  isPublished_DESC
  title_ASC
  title_DESC
  text_ASC
  text_DESC
  updatedAt_ASC
  updatedAt_DESC
  createdAt_ASC
  createdAt_DESC
}

type PostPreviousValues {
  id: ID!
  isPublished: Boolean!
  title: String!
  text: String!
}

type PostSubscriptionPayload {
  mutation: MutationType!
  node: Post
  updatedFields: [String!]
  previousValues: PostPreviousValues
}

input PostSubscriptionWhereInput {
  AND: [PostSubscriptionWhereInput!]

  OR: [PostSubscriptionWhereInput!]

  NOT: [PostSubscriptionWhereInput!]

  mutation_in: [MutationType!]

  updatedFields_contains: String

  updatedFields_contains_every: [String!]
  
  updatedFields_contains_some: [String!]
  node: PostWhereInput
}

input PostUpdateInput {
  isPublished: Boolean
  title: String
  text: String
}

input PostWhereInput {
  AND: [PostWhereInput!]

  OR: [PostWhereInput!]

  NOT: [PostWhereInput!]
  id: ID

  id_not: ID

  id_in: [ID!]

  id_not_in: [ID!]

  id_lt: ID

  id_lte: ID

  id_gt: ID

  id_gte: ID

  id_contains: ID

  id_not_contains: ID

  id_starts_with: ID

  id_not_starts_with: ID

  id_ends_with: ID

  id_not_ends_with: ID
  isPublished: Boolean

  isPublished_not: Boolean
  title: String

  title_not: String

  title_in: [String!]

  title_not_in: [String!]

  title_lt: String

  title_lte: String

  title_gt: String

  """All values greater than or equal the given value."""
  title_gte: String

  title_contains: String

  title_not_contains: String

  title_starts_with: String

  title_not_starts_with: String

  title_ends_with: String

  title_not_ends_with: String
  text: String

  text_not: String

  text_in: [String!]

  text_not_in: [String!]

  text_lt: String

  text_lte: String

  text_gt: String

  text_gte: String

  text_contains: String

  text_not_contains: String

  text_starts_with: String

  text_not_starts_with: String

  text_ends_with: String

  text_not_ends_with: String
}

input PostWhereUniqueInput {
  id: ID
}

type Query {
  posts(where: PostWhereInput, orderBy: PostOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Post]!
  courses(where: CourseWhereInput, orderBy: CourseOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Course]!
  users(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [User]!
  post(where: PostWhereUniqueInput!): Post
  course(where: CourseWhereUniqueInput!): Course
  user(where: UserWhereUniqueInput!): User
  postsConnection(where: PostWhereInput, orderBy: PostOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): PostConnection!
  coursesConnection(where: CourseWhereInput, orderBy: CourseOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): CourseConnection!
  usersConnection(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): UserConnection!
  node(
    id: ID!
  ): Node
}

type Subscription {
  post(where: PostSubscriptionWhereInput): PostSubscriptionPayload
  course(where: CourseSubscriptionWhereInput): CourseSubscriptionPayload
  user(where: UserSubscriptionWhereInput): UserSubscriptionPayload
}

type User implements Node {
  id: ID!
  email: String!
  password: String!
}


type UserConnection {
  pageInfo: PageInfo!

  edges: [UserEdge]!
  aggregate: AggregateUser!
}

input UserCreateInput {
  email: String!
  password: String!
}

type UserEdge {
  node: User!

  cursor: String!
}

enum UserOrderByInput {
  id_ASC
  id_DESC
  email_ASC
  email_DESC
  password_ASC
  password_DESC
  updatedAt_ASC
  updatedAt_DESC
  createdAt_ASC
  createdAt_DESC
}

type UserPreviousValues {
  id: ID!
  email: String!
  password: String!
}

type UserSubscriptionPayload {
  mutation: MutationType!
  node: User
  updatedFields: [String!]
  previousValues: UserPreviousValues
}

input UserSubscriptionWhereInput {
  AND: [UserSubscriptionWhereInput!]

  OR: [UserSubscriptionWhereInput!]

  NOT: [UserSubscriptionWhereInput!]

  mutation_in: [MutationType!]

  updatedFields_contains: String

  updatedFields_contains_every: [String!]

  updatedFields_contains_some: [String!]
  node: UserWhereInput
}

input UserUpdateInput {
  email: String
  password: String
}

input UserWhereInput {
  AND: [UserWhereInput!]

  OR: [UserWhereInput!]

  NOT: [UserWhereInput!]
  id: ID

  id_not: ID

  id_in: [ID!]

  id_not_in: [ID!]

  id_lt: ID

  id_lte: ID

  id_gt: ID

  id_gte: ID

  id_contains: ID

  id_not_contains: ID

  id_starts_with: ID

  id_not_starts_with: ID

  id_ends_with: ID

  id_not_ends_with: ID
  email: String

  email_not: String

  email_in: [String!]

  email_not_in: [String!]

  email_lt: String

  email_lte: String

  email_gt: String

  email_gte: String

  email_contains: String

  email_not_contains: String

  email_starts_with: String

  email_not_starts_with: String

  email_ends_with: String

  email_not_ends_with: String
  password: String

  password_not: String

  password_in: [String!]

  password_not_in: [String!]

  password_lt: String

  password_lte: String

  password_gt: String

  password_gte: String

  password_contains: String

  password_not_contains: String

  password_starts_with: String

  password_not_starts_with: String

  password_ends_with: String

  password_not_ends_with: String
}

input UserWhereUniqueInput {
  id: ID
  email: String
}
